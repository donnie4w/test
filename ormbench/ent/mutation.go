// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hstest"
	"enttest/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeHstest = "Hstest"
)

// HstestMutation represents an operation that mutates the Hstest nodes in the graph.
type HstestMutation struct {
	config
	op            Op
	typ           string
	id            *int
	age           *int
	addage        *int
	rowname       *string
	value         *string
	updatetime    *time.Time
	body          *string
	floa          *float64
	addfloa       *float64
	level         *int
	addlevel      *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Hstest, error)
	predicates    []predicate.Hstest
}

var _ ent.Mutation = (*HstestMutation)(nil)

// hstestOption allows management of the mutation configuration using functional options.
type hstestOption func(*HstestMutation)

// newHstestMutation creates new mutation for the Hstest entity.
func newHstestMutation(c config, op Op, opts ...hstestOption) *HstestMutation {
	m := &HstestMutation{
		config:        c,
		op:            op,
		typ:           TypeHstest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHstestID sets the ID field of the mutation.
func withHstestID(id int) hstestOption {
	return func(m *HstestMutation) {
		var (
			err   error
			once  sync.Once
			value *Hstest
		)
		m.oldValue = func(ctx context.Context) (*Hstest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hstest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHstest sets the old Hstest of the mutation.
func withHstest(node *Hstest) hstestOption {
	return func(m *HstestMutation) {
		m.oldValue = func(context.Context) (*Hstest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HstestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HstestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Hstest entities.
func (m *HstestMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HstestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HstestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hstest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAge sets the "age" field.
func (m *HstestMutation) SetAge(i int) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *HstestMutation) Age() (r int, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *HstestMutation) AddAge(i int) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *HstestMutation) AddedAge() (r int, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge resets all changes to the "age" field.
func (m *HstestMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// SetRowname sets the "rowname" field.
func (m *HstestMutation) SetRowname(s string) {
	m.rowname = &s
}

// Rowname returns the value of the "rowname" field in the mutation.
func (m *HstestMutation) Rowname() (r string, exists bool) {
	v := m.rowname
	if v == nil {
		return
	}
	return *v, true
}

// OldRowname returns the old "rowname" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldRowname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRowname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRowname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRowname: %w", err)
	}
	return oldValue.Rowname, nil
}

// ResetRowname resets all changes to the "rowname" field.
func (m *HstestMutation) ResetRowname() {
	m.rowname = nil
}

// SetValue sets the "value" field.
func (m *HstestMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *HstestMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *HstestMutation) ResetValue() {
	m.value = nil
}

// SetUpdatetime sets the "updatetime" field.
func (m *HstestMutation) SetUpdatetime(t time.Time) {
	m.updatetime = &t
}

// Updatetime returns the value of the "updatetime" field in the mutation.
func (m *HstestMutation) Updatetime() (r time.Time, exists bool) {
	v := m.updatetime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatetime returns the old "updatetime" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldUpdatetime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatetime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatetime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatetime: %w", err)
	}
	return oldValue.Updatetime, nil
}

// ResetUpdatetime resets all changes to the "updatetime" field.
func (m *HstestMutation) ResetUpdatetime() {
	m.updatetime = nil
}

// SetBody sets the "body" field.
func (m *HstestMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *HstestMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *HstestMutation) ResetBody() {
	m.body = nil
}

// SetFloa sets the "floa" field.
func (m *HstestMutation) SetFloa(f float64) {
	m.floa = &f
	m.addfloa = nil
}

// Floa returns the value of the "floa" field in the mutation.
func (m *HstestMutation) Floa() (r float64, exists bool) {
	v := m.floa
	if v == nil {
		return
	}
	return *v, true
}

// OldFloa returns the old "floa" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldFloa(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloa is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloa requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloa: %w", err)
	}
	return oldValue.Floa, nil
}

// AddFloa adds f to the "floa" field.
func (m *HstestMutation) AddFloa(f float64) {
	if m.addfloa != nil {
		*m.addfloa += f
	} else {
		m.addfloa = &f
	}
}

// AddedFloa returns the value that was added to the "floa" field in this mutation.
func (m *HstestMutation) AddedFloa() (r float64, exists bool) {
	v := m.addfloa
	if v == nil {
		return
	}
	return *v, true
}

// ResetFloa resets all changes to the "floa" field.
func (m *HstestMutation) ResetFloa() {
	m.floa = nil
	m.addfloa = nil
}

// SetLevel sets the "level" field.
func (m *HstestMutation) SetLevel(i int) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *HstestMutation) Level() (r int, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Hstest entity.
// If the Hstest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HstestMutation) OldLevel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *HstestMutation) AddLevel(i int) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *HstestMutation) AddedLevel() (r int, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *HstestMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// Where appends a list predicates to the HstestMutation builder.
func (m *HstestMutation) Where(ps ...predicate.Hstest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HstestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HstestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hstest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HstestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HstestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hstest).
func (m *HstestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HstestMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.age != nil {
		fields = append(fields, hstest.FieldAge)
	}
	if m.rowname != nil {
		fields = append(fields, hstest.FieldRowname)
	}
	if m.value != nil {
		fields = append(fields, hstest.FieldValue)
	}
	if m.updatetime != nil {
		fields = append(fields, hstest.FieldUpdatetime)
	}
	if m.body != nil {
		fields = append(fields, hstest.FieldBody)
	}
	if m.floa != nil {
		fields = append(fields, hstest.FieldFloa)
	}
	if m.level != nil {
		fields = append(fields, hstest.FieldLevel)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HstestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hstest.FieldAge:
		return m.Age()
	case hstest.FieldRowname:
		return m.Rowname()
	case hstest.FieldValue:
		return m.Value()
	case hstest.FieldUpdatetime:
		return m.Updatetime()
	case hstest.FieldBody:
		return m.Body()
	case hstest.FieldFloa:
		return m.Floa()
	case hstest.FieldLevel:
		return m.Level()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HstestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hstest.FieldAge:
		return m.OldAge(ctx)
	case hstest.FieldRowname:
		return m.OldRowname(ctx)
	case hstest.FieldValue:
		return m.OldValue(ctx)
	case hstest.FieldUpdatetime:
		return m.OldUpdatetime(ctx)
	case hstest.FieldBody:
		return m.OldBody(ctx)
	case hstest.FieldFloa:
		return m.OldFloa(ctx)
	case hstest.FieldLevel:
		return m.OldLevel(ctx)
	}
	return nil, fmt.Errorf("unknown Hstest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HstestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hstest.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	case hstest.FieldRowname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRowname(v)
		return nil
	case hstest.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case hstest.FieldUpdatetime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatetime(v)
		return nil
	case hstest.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case hstest.FieldFloa:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloa(v)
		return nil
	case hstest.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Hstest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HstestMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, hstest.FieldAge)
	}
	if m.addfloa != nil {
		fields = append(fields, hstest.FieldFloa)
	}
	if m.addlevel != nil {
		fields = append(fields, hstest.FieldLevel)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HstestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case hstest.FieldAge:
		return m.AddedAge()
	case hstest.FieldFloa:
		return m.AddedFloa()
	case hstest.FieldLevel:
		return m.AddedLevel()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HstestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case hstest.FieldAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	case hstest.FieldFloa:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFloa(v)
		return nil
	case hstest.FieldLevel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	}
	return fmt.Errorf("unknown Hstest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HstestMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HstestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HstestMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hstest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HstestMutation) ResetField(name string) error {
	switch name {
	case hstest.FieldAge:
		m.ResetAge()
		return nil
	case hstest.FieldRowname:
		m.ResetRowname()
		return nil
	case hstest.FieldValue:
		m.ResetValue()
		return nil
	case hstest.FieldUpdatetime:
		m.ResetUpdatetime()
		return nil
	case hstest.FieldBody:
		m.ResetBody()
		return nil
	case hstest.FieldFloa:
		m.ResetFloa()
		return nil
	case hstest.FieldLevel:
		m.ResetLevel()
		return nil
	}
	return fmt.Errorf("unknown Hstest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HstestMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HstestMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HstestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HstestMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HstestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HstestMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HstestMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Hstest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HstestMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Hstest edge %s", name)
}
