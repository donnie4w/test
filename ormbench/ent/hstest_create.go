// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hstest"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HstestCreate is the builder for creating a Hstest entity.
type HstestCreate struct {
	config
	mutation *HstestMutation
	hooks    []Hook
}

// SetAge sets the "age" field.
func (hc *HstestCreate) SetAge(i int) *HstestCreate {
	hc.mutation.SetAge(i)
	return hc
}

// SetRowname sets the "rowname" field.
func (hc *HstestCreate) SetRowname(s string) *HstestCreate {
	hc.mutation.SetRowname(s)
	return hc
}

// SetValue sets the "value" field.
func (hc *HstestCreate) SetValue(s string) *HstestCreate {
	hc.mutation.SetValue(s)
	return hc
}

// SetUpdatetime sets the "updatetime" field.
func (hc *HstestCreate) SetUpdatetime(t time.Time) *HstestCreate {
	hc.mutation.SetUpdatetime(t)
	return hc
}

// SetNillableUpdatetime sets the "updatetime" field if the given value is not nil.
func (hc *HstestCreate) SetNillableUpdatetime(t *time.Time) *HstestCreate {
	if t != nil {
		hc.SetUpdatetime(*t)
	}
	return hc
}

// SetBody sets the "body" field.
func (hc *HstestCreate) SetBody(s string) *HstestCreate {
	hc.mutation.SetBody(s)
	return hc
}

// SetFloa sets the "floa" field.
func (hc *HstestCreate) SetFloa(f float64) *HstestCreate {
	hc.mutation.SetFloa(f)
	return hc
}

// SetLevel sets the "level" field.
func (hc *HstestCreate) SetLevel(i int) *HstestCreate {
	hc.mutation.SetLevel(i)
	return hc
}

// SetID sets the "id" field.
func (hc *HstestCreate) SetID(i int) *HstestCreate {
	hc.mutation.SetID(i)
	return hc
}

// Mutation returns the HstestMutation object of the builder.
func (hc *HstestCreate) Mutation() *HstestMutation {
	return hc.mutation
}

// Save creates the Hstest in the database.
func (hc *HstestCreate) Save(ctx context.Context) (*Hstest, error) {
	hc.defaults()
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HstestCreate) SaveX(ctx context.Context) *Hstest {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HstestCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HstestCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HstestCreate) defaults() {
	if _, ok := hc.mutation.Updatetime(); !ok {
		v := hstest.DefaultUpdatetime()
		hc.mutation.SetUpdatetime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HstestCreate) check() error {
	if _, ok := hc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "Hstest.age"`)}
	}
	if _, ok := hc.mutation.Rowname(); !ok {
		return &ValidationError{Name: "rowname", err: errors.New(`ent: missing required field "Hstest.rowname"`)}
	}
	if _, ok := hc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "Hstest.value"`)}
	}
	if _, ok := hc.mutation.Updatetime(); !ok {
		return &ValidationError{Name: "updatetime", err: errors.New(`ent: missing required field "Hstest.updatetime"`)}
	}
	if _, ok := hc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Hstest.body"`)}
	}
	if _, ok := hc.mutation.Floa(); !ok {
		return &ValidationError{Name: "floa", err: errors.New(`ent: missing required field "Hstest.floa"`)}
	}
	if _, ok := hc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Hstest.level"`)}
	}
	return nil
}

func (hc *HstestCreate) sqlSave(ctx context.Context) (*Hstest, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HstestCreate) createSpec() (*Hstest, *sqlgraph.CreateSpec) {
	var (
		_node = &Hstest{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hstest.Table, sqlgraph.NewFieldSpec(hstest.FieldID, field.TypeInt))
	)
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.Age(); ok {
		_spec.SetField(hstest.FieldAge, field.TypeInt, value)
		_node.Age = value
	}
	if value, ok := hc.mutation.Rowname(); ok {
		_spec.SetField(hstest.FieldRowname, field.TypeString, value)
		_node.Rowname = value
	}
	if value, ok := hc.mutation.Value(); ok {
		_spec.SetField(hstest.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := hc.mutation.Updatetime(); ok {
		_spec.SetField(hstest.FieldUpdatetime, field.TypeTime, value)
		_node.Updatetime = value
	}
	if value, ok := hc.mutation.Body(); ok {
		_spec.SetField(hstest.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := hc.mutation.Floa(); ok {
		_spec.SetField(hstest.FieldFloa, field.TypeFloat64, value)
		_node.Floa = value
	}
	if value, ok := hc.mutation.Level(); ok {
		_spec.SetField(hstest.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	return _node, _spec
}

// HstestCreateBulk is the builder for creating many Hstest entities in bulk.
type HstestCreateBulk struct {
	config
	err      error
	builders []*HstestCreate
}

// Save creates the Hstest entities in the database.
func (hcb *HstestCreateBulk) Save(ctx context.Context) ([]*Hstest, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hstest, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HstestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HstestCreateBulk) SaveX(ctx context.Context) []*Hstest {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HstestCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HstestCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
