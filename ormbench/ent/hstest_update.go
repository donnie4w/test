// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"enttest/ent/hstest"
	"enttest/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HstestUpdate is the builder for updating Hstest entities.
type HstestUpdate struct {
	config
	hooks    []Hook
	mutation *HstestMutation
}

// Where appends a list predicates to the HstestUpdate builder.
func (hu *HstestUpdate) Where(ps ...predicate.Hstest) *HstestUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetAge sets the "age" field.
func (hu *HstestUpdate) SetAge(i int) *HstestUpdate {
	hu.mutation.ResetAge()
	hu.mutation.SetAge(i)
	return hu
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableAge(i *int) *HstestUpdate {
	if i != nil {
		hu.SetAge(*i)
	}
	return hu
}

// AddAge adds i to the "age" field.
func (hu *HstestUpdate) AddAge(i int) *HstestUpdate {
	hu.mutation.AddAge(i)
	return hu
}

// SetRowname sets the "rowname" field.
func (hu *HstestUpdate) SetRowname(s string) *HstestUpdate {
	hu.mutation.SetRowname(s)
	return hu
}

// SetNillableRowname sets the "rowname" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableRowname(s *string) *HstestUpdate {
	if s != nil {
		hu.SetRowname(*s)
	}
	return hu
}

// SetValue sets the "value" field.
func (hu *HstestUpdate) SetValue(s string) *HstestUpdate {
	hu.mutation.SetValue(s)
	return hu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableValue(s *string) *HstestUpdate {
	if s != nil {
		hu.SetValue(*s)
	}
	return hu
}

// SetUpdatetime sets the "updatetime" field.
func (hu *HstestUpdate) SetUpdatetime(t time.Time) *HstestUpdate {
	hu.mutation.SetUpdatetime(t)
	return hu
}

// SetNillableUpdatetime sets the "updatetime" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableUpdatetime(t *time.Time) *HstestUpdate {
	if t != nil {
		hu.SetUpdatetime(*t)
	}
	return hu
}

// SetBody sets the "body" field.
func (hu *HstestUpdate) SetBody(s string) *HstestUpdate {
	hu.mutation.SetBody(s)
	return hu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableBody(s *string) *HstestUpdate {
	if s != nil {
		hu.SetBody(*s)
	}
	return hu
}

// SetFloa sets the "floa" field.
func (hu *HstestUpdate) SetFloa(f float64) *HstestUpdate {
	hu.mutation.ResetFloa()
	hu.mutation.SetFloa(f)
	return hu
}

// SetNillableFloa sets the "floa" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableFloa(f *float64) *HstestUpdate {
	if f != nil {
		hu.SetFloa(*f)
	}
	return hu
}

// AddFloa adds f to the "floa" field.
func (hu *HstestUpdate) AddFloa(f float64) *HstestUpdate {
	hu.mutation.AddFloa(f)
	return hu
}

// SetLevel sets the "level" field.
func (hu *HstestUpdate) SetLevel(i int) *HstestUpdate {
	hu.mutation.ResetLevel()
	hu.mutation.SetLevel(i)
	return hu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (hu *HstestUpdate) SetNillableLevel(i *int) *HstestUpdate {
	if i != nil {
		hu.SetLevel(*i)
	}
	return hu
}

// AddLevel adds i to the "level" field.
func (hu *HstestUpdate) AddLevel(i int) *HstestUpdate {
	hu.mutation.AddLevel(i)
	return hu
}

// Mutation returns the HstestMutation object of the builder.
func (hu *HstestUpdate) Mutation() *HstestMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HstestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HstestUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HstestUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HstestUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HstestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(hstest.Table, hstest.Columns, sqlgraph.NewFieldSpec(hstest.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Age(); ok {
		_spec.SetField(hstest.FieldAge, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedAge(); ok {
		_spec.AddField(hstest.FieldAge, field.TypeInt, value)
	}
	if value, ok := hu.mutation.Rowname(); ok {
		_spec.SetField(hstest.FieldRowname, field.TypeString, value)
	}
	if value, ok := hu.mutation.Value(); ok {
		_spec.SetField(hstest.FieldValue, field.TypeString, value)
	}
	if value, ok := hu.mutation.Updatetime(); ok {
		_spec.SetField(hstest.FieldUpdatetime, field.TypeTime, value)
	}
	if value, ok := hu.mutation.Body(); ok {
		_spec.SetField(hstest.FieldBody, field.TypeString, value)
	}
	if value, ok := hu.mutation.Floa(); ok {
		_spec.SetField(hstest.FieldFloa, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.AddedFloa(); ok {
		_spec.AddField(hstest.FieldFloa, field.TypeFloat64, value)
	}
	if value, ok := hu.mutation.Level(); ok {
		_spec.SetField(hstest.FieldLevel, field.TypeInt, value)
	}
	if value, ok := hu.mutation.AddedLevel(); ok {
		_spec.AddField(hstest.FieldLevel, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hstest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HstestUpdateOne is the builder for updating a single Hstest entity.
type HstestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HstestMutation
}

// SetAge sets the "age" field.
func (huo *HstestUpdateOne) SetAge(i int) *HstestUpdateOne {
	huo.mutation.ResetAge()
	huo.mutation.SetAge(i)
	return huo
}

// SetNillableAge sets the "age" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableAge(i *int) *HstestUpdateOne {
	if i != nil {
		huo.SetAge(*i)
	}
	return huo
}

// AddAge adds i to the "age" field.
func (huo *HstestUpdateOne) AddAge(i int) *HstestUpdateOne {
	huo.mutation.AddAge(i)
	return huo
}

// SetRowname sets the "rowname" field.
func (huo *HstestUpdateOne) SetRowname(s string) *HstestUpdateOne {
	huo.mutation.SetRowname(s)
	return huo
}

// SetNillableRowname sets the "rowname" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableRowname(s *string) *HstestUpdateOne {
	if s != nil {
		huo.SetRowname(*s)
	}
	return huo
}

// SetValue sets the "value" field.
func (huo *HstestUpdateOne) SetValue(s string) *HstestUpdateOne {
	huo.mutation.SetValue(s)
	return huo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableValue(s *string) *HstestUpdateOne {
	if s != nil {
		huo.SetValue(*s)
	}
	return huo
}

// SetUpdatetime sets the "updatetime" field.
func (huo *HstestUpdateOne) SetUpdatetime(t time.Time) *HstestUpdateOne {
	huo.mutation.SetUpdatetime(t)
	return huo
}

// SetNillableUpdatetime sets the "updatetime" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableUpdatetime(t *time.Time) *HstestUpdateOne {
	if t != nil {
		huo.SetUpdatetime(*t)
	}
	return huo
}

// SetBody sets the "body" field.
func (huo *HstestUpdateOne) SetBody(s string) *HstestUpdateOne {
	huo.mutation.SetBody(s)
	return huo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableBody(s *string) *HstestUpdateOne {
	if s != nil {
		huo.SetBody(*s)
	}
	return huo
}

// SetFloa sets the "floa" field.
func (huo *HstestUpdateOne) SetFloa(f float64) *HstestUpdateOne {
	huo.mutation.ResetFloa()
	huo.mutation.SetFloa(f)
	return huo
}

// SetNillableFloa sets the "floa" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableFloa(f *float64) *HstestUpdateOne {
	if f != nil {
		huo.SetFloa(*f)
	}
	return huo
}

// AddFloa adds f to the "floa" field.
func (huo *HstestUpdateOne) AddFloa(f float64) *HstestUpdateOne {
	huo.mutation.AddFloa(f)
	return huo
}

// SetLevel sets the "level" field.
func (huo *HstestUpdateOne) SetLevel(i int) *HstestUpdateOne {
	huo.mutation.ResetLevel()
	huo.mutation.SetLevel(i)
	return huo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (huo *HstestUpdateOne) SetNillableLevel(i *int) *HstestUpdateOne {
	if i != nil {
		huo.SetLevel(*i)
	}
	return huo
}

// AddLevel adds i to the "level" field.
func (huo *HstestUpdateOne) AddLevel(i int) *HstestUpdateOne {
	huo.mutation.AddLevel(i)
	return huo
}

// Mutation returns the HstestMutation object of the builder.
func (huo *HstestUpdateOne) Mutation() *HstestMutation {
	return huo.mutation
}

// Where appends a list predicates to the HstestUpdate builder.
func (huo *HstestUpdateOne) Where(ps ...predicate.Hstest) *HstestUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HstestUpdateOne) Select(field string, fields ...string) *HstestUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hstest entity.
func (huo *HstestUpdateOne) Save(ctx context.Context) (*Hstest, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HstestUpdateOne) SaveX(ctx context.Context) *Hstest {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HstestUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HstestUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HstestUpdateOne) sqlSave(ctx context.Context) (_node *Hstest, err error) {
	_spec := sqlgraph.NewUpdateSpec(hstest.Table, hstest.Columns, sqlgraph.NewFieldSpec(hstest.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hstest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hstest.FieldID)
		for _, f := range fields {
			if !hstest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hstest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Age(); ok {
		_spec.SetField(hstest.FieldAge, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedAge(); ok {
		_spec.AddField(hstest.FieldAge, field.TypeInt, value)
	}
	if value, ok := huo.mutation.Rowname(); ok {
		_spec.SetField(hstest.FieldRowname, field.TypeString, value)
	}
	if value, ok := huo.mutation.Value(); ok {
		_spec.SetField(hstest.FieldValue, field.TypeString, value)
	}
	if value, ok := huo.mutation.Updatetime(); ok {
		_spec.SetField(hstest.FieldUpdatetime, field.TypeTime, value)
	}
	if value, ok := huo.mutation.Body(); ok {
		_spec.SetField(hstest.FieldBody, field.TypeString, value)
	}
	if value, ok := huo.mutation.Floa(); ok {
		_spec.SetField(hstest.FieldFloa, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.AddedFloa(); ok {
		_spec.AddField(hstest.FieldFloa, field.TypeFloat64, value)
	}
	if value, ok := huo.mutation.Level(); ok {
		_spec.SetField(hstest.FieldLevel, field.TypeInt, value)
	}
	if value, ok := huo.mutation.AddedLevel(); ok {
		_spec.AddField(hstest.FieldLevel, field.TypeInt, value)
	}
	_node = &Hstest{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hstest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
