// Code generated by ent, DO NOT EDIT.

package hstest

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the hstest type in the database.
	Label = "hstest"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldRowname holds the string denoting the rowname field in the database.
	FieldRowname = "rowname"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldUpdatetime holds the string denoting the updatetime field in the database.
	FieldUpdatetime = "updatetime"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldFloa holds the string denoting the floa field in the database.
	FieldFloa = "floa"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// Table holds the table name of the hstest in the database.
	Table = "hstest"
)

// Columns holds all SQL columns for hstest fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldRowname,
	FieldValue,
	FieldUpdatetime,
	FieldBody,
	FieldFloa,
	FieldLevel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatetime holds the default value on creation for the "updatetime" field.
	DefaultUpdatetime func() time.Time
)

// OrderOption defines the ordering options for the Hstest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAge orders the results by the age field.
func ByAge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAge, opts...).ToFunc()
}

// ByRowname orders the results by the rowname field.
func ByRowname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRowname, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByUpdatetime orders the results by the updatetime field.
func ByUpdatetime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatetime, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByFloa orders the results by the floa field.
func ByFloa(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFloa, opts...).ToFunc()
}

// ByLevel orders the results by the level field.
func ByLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLevel, opts...).ToFunc()
}
