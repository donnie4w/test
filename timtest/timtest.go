// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package timtest

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/donnie4w/gothrift/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Node
//  - Domain
//  - Resource
//  - Termtyp
type TidTF struct {
  Node string `thrift:"node,1,required" db:"node" json:"node"`
  Domain *string `thrift:"domain,2" db:"domain" json:"domain,omitempty"`
  Resource *string `thrift:"resource,3" db:"resource" json:"resource,omitempty"`
  Termtyp *int8 `thrift:"termtyp,4" db:"termtyp" json:"termtyp,omitempty"`
}

func NewTidTF() *TidTF {
  return &TidTF{}
}


func (p *TidTF) GetNode() string {
  return p.Node
}
var TidTF_Domain_DEFAULT string
func (p *TidTF) GetDomain() string {
  if !p.IsSetDomain() {
    return TidTF_Domain_DEFAULT
  }
return *p.Domain
}
var TidTF_Resource_DEFAULT string
func (p *TidTF) GetResource() string {
  if !p.IsSetResource() {
    return TidTF_Resource_DEFAULT
  }
return *p.Resource
}
var TidTF_Termtyp_DEFAULT int8
func (p *TidTF) GetTermtyp() int8 {
  if !p.IsSetTermtyp() {
    return TidTF_Termtyp_DEFAULT
  }
return *p.Termtyp
}
func (p *TidTF) IsSetDomain() bool {
  return p.Domain != nil
}

func (p *TidTF) IsSetResource() bool {
  return p.Resource != nil
}

func (p *TidTF) IsSetTermtyp() bool {
  return p.Termtyp != nil
}

func (p *TidTF) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Node is not set"));
  }
  return nil
}

func (p *TidTF)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Node = v
}
  return nil
}

func (p *TidTF)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Domain = &v
}
  return nil
}

func (p *TidTF)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Resource = &v
}
  return nil
}

func (p *TidTF)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := int8(v)
  p.Termtyp = &temp
}
  return nil
}

func (p *TidTF) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TidTF"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TidTF) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "node", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Node)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.node (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *TidTF) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDomain() {
    if err := oprot.WriteFieldBegin(ctx, "domain", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:domain: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Domain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.domain (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:domain: ", p), err) }
  }
  return err
}

func (p *TidTF) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResource() {
    if err := oprot.WriteFieldBegin(ctx, "resource", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:resource: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Resource)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resource (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:resource: ", p), err) }
  }
  return err
}

func (p *TidTF) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTermtyp() {
    if err := oprot.WriteFieldBegin(ctx, "termtyp", thrift.BYTE, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:termtyp: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.Termtyp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.termtyp (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:termtyp: ", p), err) }
  }
  return err
}

func (p *TidTF) Equals(other *TidTF) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Node != other.Node { return false }
  if p.Domain != other.Domain {
    if p.Domain == nil || other.Domain == nil {
      return false
    }
    if (*p.Domain) != (*other.Domain) { return false }
  }
  if p.Resource != other.Resource {
    if p.Resource == nil || other.Resource == nil {
      return false
    }
    if (*p.Resource) != (*other.Resource) { return false }
  }
  if p.Termtyp != other.Termtyp {
    if p.Termtyp == nil || other.Termtyp == nil {
      return false
    }
    if (*p.Termtyp) != (*other.Termtyp) { return false }
  }
  return true
}

func (p *TidTF) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TidTF(%+v)", *p)
}

func (p *TidTF) Validate() error {
  return nil
}
// Attributes:
//  - MsType
//  - OdType
//  - ID
//  - Mid
//  - BnType
//  - FromTid
//  - ToTid
//  - Body
//  - IsOffline
//  - Timestamp
//  - Extend
type TimTFMessage struct {
  MsType int8 `thrift:"msType,1,required" db:"msType" json:"msType"`
  OdType int8 `thrift:"odType,2,required" db:"odType" json:"odType"`
  ID *int64 `thrift:"id,3" db:"id" json:"id,omitempty"`
  Mid *int64 `thrift:"mid,4" db:"mid" json:"mid,omitempty"`
  BnType *int32 `thrift:"bnType,5" db:"bnType" json:"bnType,omitempty"`
  FromTid *TidTF `thrift:"fromTid,6" db:"fromTid" json:"fromTid,omitempty"`
  ToTid *TidTF `thrift:"toTid,7" db:"toTid" json:"toTid,omitempty"`
  Body []byte `thrift:"body,8" db:"body" json:"body,omitempty"`
  IsOffline *bool `thrift:"isOffline,9" db:"isOffline" json:"isOffline,omitempty"`
  Timestamp *int64 `thrift:"timestamp,10" db:"timestamp" json:"timestamp,omitempty"`
  Extend map[string]string `thrift:"extend,11" db:"extend" json:"extend,omitempty"`
}

func NewTimTFMessage() *TimTFMessage {
  return &TimTFMessage{}
}


func (p *TimTFMessage) GetMsType() int8 {
  return p.MsType
}

func (p *TimTFMessage) GetOdType() int8 {
  return p.OdType
}
var TimTFMessage_ID_DEFAULT int64
func (p *TimTFMessage) GetID() int64 {
  if !p.IsSetID() {
    return TimTFMessage_ID_DEFAULT
  }
return *p.ID
}
var TimTFMessage_Mid_DEFAULT int64
func (p *TimTFMessage) GetMid() int64 {
  if !p.IsSetMid() {
    return TimTFMessage_Mid_DEFAULT
  }
return *p.Mid
}
var TimTFMessage_BnType_DEFAULT int32
func (p *TimTFMessage) GetBnType() int32 {
  if !p.IsSetBnType() {
    return TimTFMessage_BnType_DEFAULT
  }
return *p.BnType
}
var TimTFMessage_FromTid_DEFAULT *TidTF
func (p *TimTFMessage) GetFromTid() *TidTF {
  if !p.IsSetFromTid() {
    return TimTFMessage_FromTid_DEFAULT
  }
return p.FromTid
}
var TimTFMessage_ToTid_DEFAULT *TidTF
func (p *TimTFMessage) GetToTid() *TidTF {
  if !p.IsSetToTid() {
    return TimTFMessage_ToTid_DEFAULT
  }
return p.ToTid
}
var TimTFMessage_Body_DEFAULT []byte

func (p *TimTFMessage) GetBody() []byte {
  return p.Body
}
var TimTFMessage_IsOffline_DEFAULT bool
func (p *TimTFMessage) GetIsOffline() bool {
  if !p.IsSetIsOffline() {
    return TimTFMessage_IsOffline_DEFAULT
  }
return *p.IsOffline
}
var TimTFMessage_Timestamp_DEFAULT int64
func (p *TimTFMessage) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TimTFMessage_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TimTFMessage_Extend_DEFAULT map[string]string

func (p *TimTFMessage) GetExtend() map[string]string {
  return p.Extend
}
func (p *TimTFMessage) IsSetID() bool {
  return p.ID != nil
}

func (p *TimTFMessage) IsSetMid() bool {
  return p.Mid != nil
}

func (p *TimTFMessage) IsSetBnType() bool {
  return p.BnType != nil
}

func (p *TimTFMessage) IsSetFromTid() bool {
  return p.FromTid != nil
}

func (p *TimTFMessage) IsSetToTid() bool {
  return p.ToTid != nil
}

func (p *TimTFMessage) IsSetBody() bool {
  return p.Body != nil
}

func (p *TimTFMessage) IsSetIsOffline() bool {
  return p.IsOffline != nil
}

func (p *TimTFMessage) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TimTFMessage) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *TimTFMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMsType bool = false;
  var issetOdType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetMsType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetOdType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMsType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MsType is not set"));
  }
  if !issetOdType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field OdType is not set"));
  }
  return nil
}

func (p *TimTFMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := int8(v)
  p.MsType = temp
}
  return nil
}

func (p *TimTFMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := int8(v)
  p.OdType = temp
}
  return nil
}

func (p *TimTFMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *TimTFMessage)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Mid = &v
}
  return nil
}

func (p *TimTFMessage)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BnType = &v
}
  return nil
}

func (p *TimTFMessage)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  p.FromTid = &TidTF{}
  if err := p.FromTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FromTid), err)
  }
  return nil
}

func (p *TimTFMessage)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.ToTid = &TidTF{}
  if err := p.ToTid.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ToTid), err)
  }
  return nil
}

func (p *TimTFMessage)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Body = v
}
  return nil
}

func (p *TimTFMessage)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsOffline = &v
}
  return nil
}

func (p *TimTFMessage)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TimTFMessage)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extend[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TimTFMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TimTFMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TimTFMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msType", thrift.BYTE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msType: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.MsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msType: ", p), err) }
  return err
}

func (p *TimTFMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "odType", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:odType: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.OdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.odType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:odType: ", p), err) }
  return err
}

func (p *TimTFMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:id: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:id: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMid() {
    if err := oprot.WriteFieldBegin(ctx, "mid", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:mid: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Mid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.mid (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:mid: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBnType() {
    if err := oprot.WriteFieldBegin(ctx, "bnType", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bnType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.BnType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bnType (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bnType: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFromTid() {
    if err := oprot.WriteFieldBegin(ctx, "fromTid", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fromTid: ", p), err) }
    if err := p.FromTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FromTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fromTid: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetToTid() {
    if err := oprot.WriteFieldBegin(ctx, "toTid", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:toTid: ", p), err) }
    if err := p.ToTid.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ToTid), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:toTid: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBody() {
    if err := oprot.WriteFieldBegin(ctx, "body", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:body: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.Body); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.body (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:body: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIsOffline() {
    if err := oprot.WriteFieldBegin(ctx, "isOffline", thrift.BOOL, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isOffline: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.IsOffline)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.isOffline (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isOffline: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timestamp: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin(ctx, "extend", thrift.MAP, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:extend: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Extend {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:extend: ", p), err) }
  }
  return err
}

func (p *TimTFMessage) Equals(other *TimTFMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MsType != other.MsType { return false }
  if p.OdType != other.OdType { return false }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.Mid != other.Mid {
    if p.Mid == nil || other.Mid == nil {
      return false
    }
    if (*p.Mid) != (*other.Mid) { return false }
  }
  if p.BnType != other.BnType {
    if p.BnType == nil || other.BnType == nil {
      return false
    }
    if (*p.BnType) != (*other.BnType) { return false }
  }
  if !p.FromTid.Equals(other.FromTid) { return false }
  if !p.ToTid.Equals(other.ToTid) { return false }
  if bytes.Compare(p.Body, other.Body) != 0 { return false }
  if p.IsOffline != other.IsOffline {
    if p.IsOffline == nil || other.IsOffline == nil {
      return false
    }
    if (*p.IsOffline) != (*other.IsOffline) { return false }
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if len(p.Extend) != len(other.Extend) { return false }
  for k, _tgt := range p.Extend {
    _src2 := other.Extend[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *TimTFMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TimTFMessage(%+v)", *p)
}

func (p *TimTFMessage) Validate() error {
  return nil
}
