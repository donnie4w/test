// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package serialize

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	"github.com/donnie4w/gothrift/thrift"
  // thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Name
//  - LongVal
//  - IntVal
//  - Int16Val
//  - Int8Val
//  - BoolVal
//  - ListVal
//  - MapVal
type Bean struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  LongVal int64 `thrift:"longVal,2,required" db:"longVal" json:"longVal"`
  IntVal int32 `thrift:"intVal,3,required" db:"intVal" json:"intVal"`
  Int16Val int16 `thrift:"int16Val,4,required" db:"int16Val" json:"int16Val"`
  Int8Val int8 `thrift:"int8Val,5,required" db:"int8Val" json:"int8Val"`
  BoolVal bool `thrift:"boolVal,6,required" db:"boolVal" json:"boolVal"`
  ListVal [][]byte `thrift:"listVal,7" db:"listVal" json:"listVal,omitempty"`
  MapVal map[string][]byte `thrift:"mapVal,8" db:"mapVal" json:"mapVal,omitempty"`
}

func NewBean() *Bean {
  return &Bean{}
}


func (p *Bean) GetName() string {
  return p.Name
}

func (p *Bean) GetLongVal() int64 {
  return p.LongVal
}

func (p *Bean) GetIntVal() int32 {
  return p.IntVal
}

func (p *Bean) GetInt16Val() int16 {
  return p.Int16Val
}

func (p *Bean) GetInt8Val() int8 {
  return p.Int8Val
}

func (p *Bean) GetBoolVal() bool {
  return p.BoolVal
}
var Bean_ListVal_DEFAULT [][]byte

func (p *Bean) GetListVal() [][]byte {
  return p.ListVal
}
var Bean_MapVal_DEFAULT map[string][]byte

func (p *Bean) GetMapVal() map[string][]byte {
  return p.MapVal
}
func (p *Bean) IsSetListVal() bool {
  return p.ListVal != nil
}

func (p *Bean) IsSetMapVal() bool {
  return p.MapVal != nil
}

func (p *Bean) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetLongVal bool = false;
  var issetIntVal bool = false;
  var issetInt16Val bool = false;
  var issetInt8Val bool = false;
  var issetBoolVal bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetLongVal = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetIntVal = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetInt16Val = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetInt8Val = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetBoolVal = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetLongVal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LongVal is not set"));
  }
  if !issetIntVal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IntVal is not set"));
  }
  if !issetInt16Val{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Int16Val is not set"));
  }
  if !issetInt8Val{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Int8Val is not set"));
  }
  if !issetBoolVal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BoolVal is not set"));
  }
  return nil
}

func (p *Bean)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Bean)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LongVal = v
}
  return nil
}

func (p *Bean)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IntVal = v
}
  return nil
}

func (p *Bean)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Int16Val = v
}
  return nil
}

func (p *Bean)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := int8(v)
  p.Int8Val = temp
}
  return nil
}

func (p *Bean)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BoolVal = v
}
  return nil
}

func (p *Bean)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.ListVal =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.ListVal = append(p.ListVal, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Bean)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]byte, size)
  p.MapVal =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 []byte
    if v, err := iprot.ReadBinary(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.MapVal[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Bean) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Bean"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Bean) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *Bean) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "longVal", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:longVal: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LongVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longVal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:longVal: ", p), err) }
  return err
}

func (p *Bean) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intVal", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intVal: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IntVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intVal (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intVal: ", p), err) }
  return err
}

func (p *Bean) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int16Val", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:int16Val: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Int16Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int16Val (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:int16Val: ", p), err) }
  return err
}

func (p *Bean) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int8Val", thrift.BYTE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:int8Val: ", p), err) }
  if err := oprot.WriteByte(ctx, int8(p.Int8Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int8Val (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:int8Val: ", p), err) }
  return err
}

func (p *Bean) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolVal", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:boolVal: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BoolVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolVal (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:boolVal: ", p), err) }
  return err
}

func (p *Bean) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetListVal() {
    if err := oprot.WriteFieldBegin(ctx, "listVal", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:listVal: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ListVal)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ListVal {
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:listVal: ", p), err) }
  }
  return err
}

func (p *Bean) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMapVal() {
    if err := oprot.WriteFieldBegin(ctx, "mapVal", thrift.MAP, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mapVal: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.MapVal)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.MapVal {
      if err := oprot.WriteString(ctx, string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(ctx, v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mapVal: ", p), err) }
  }
  return err
}

func (p *Bean) Equals(other *Bean) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.LongVal != other.LongVal { return false }
  if p.IntVal != other.IntVal { return false }
  if p.Int16Val != other.Int16Val { return false }
  if p.Int8Val != other.Int8Val { return false }
  if p.BoolVal != other.BoolVal { return false }
  if len(p.ListVal) != len(other.ListVal) { return false }
  for i, _tgt := range p.ListVal {
    _src3 := other.ListVal[i]
    if bytes.Compare(_tgt, _src3) != 0 { return false }
  }
  if len(p.MapVal) != len(other.MapVal) { return false }
  for k, _tgt := range p.MapVal {
    _src4 := other.MapVal[k]
    if bytes.Compare(_tgt, _src4) != 0 { return false }
  }
  return true
}

func (p *Bean) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Bean(%+v)", *p)
}

func (p *Bean) Validate() error {
  return nil
}
